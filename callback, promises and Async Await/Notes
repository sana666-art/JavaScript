// Synchronous:
//     1-Synchronous means the code runs in a particular sequence of instructions given in the program.
//     2-Each instruction waits for the previous instruction to complete its execution.
//     3- in a sequence --> one by one


// Asynchronous
//     1-Due to synchronous programming, sometimes imp instructions get
//     2-blocked due to some previous instructions, which causes a delay in the UI.
//     3-Asynchronous code execution allows to execute next instructions
//     4-immediately and doesn't block the flow.
//     5-real systems are follow Asynchronous programming method
//     6- parallel execution
    
// Callbacks:
//     A callback is a function passed as an argument to another function.
//     passed in a argument with it's function name.

// Callback Hell
//     Callback Hell : Nested callbacks stacked below one another forming a pyramid structure.
//     (Pyramid of Doom)
    
//     This style of programming becomes difficult to understand & manage.
    //callback hell --> nasted callbacks
    getData(1, () =>{
        console.log("getting data2.......");
        getData(2, () =>{
            console.log("getting data3.......");
            getData(3, () =>{
                console.log("getting data4.......");
                getData(4);
            });
        });
    });

to solve the problem of callback hell, we use promise.

Promises
    1-Promise is for “eventual” completion of task. 
    2-It is an object in JS.
    3-It is a solution to callback hell.

    let promise = new Promise( (resolve, reject) => { .... } )
    Function with 2 handlers

    *resolve & reject are callbacks provided by JS

    A JavaScript Promise object can be:
        Pending : the result is undefined
        Resolved : the result is a value (fulfilled)
        Rejected : the result is an error object
    
    resolve( result )
    reject( error )
    
    *Promise has state (pending, fulfilled) & some
    result (result for resolve & error for reject).
    
    promise probably created by APIs, and we just have to handle those promise to get 


    .then( ) & .catch( )
        promise.then( ( res ) => { .... } )
        promise.catch( ( err ) ) => { .... } )

to solve the problem of  promise in better way, we use async-await.
       
async-Await:
    async function always returns a promise.

    async function myfunc(){ ,,,,,, }

    await pauses the execution of its surrounding async function untill the promise is settled.

IIFE:
Immediately Invoked Function Expression
IIFE is a function that is called Immediately as soon as it is defined.

async await >> promise chains >> callback hell