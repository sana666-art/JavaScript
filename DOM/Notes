The 3 Musketeers of Web Dev
    
    1- HTML
        (structure)
    2-CSS
        (style)
    3-JS
        (logic)

whenever we create separate files for css and js:
    increase readability
    modular (chunks of codes)
    browser caching (increase response time, Quickly reload)


Window Object:
    1-The window object represents an open window in a browser. 
    2-It is browser’s object (not JavaScript’s) & is automatically created by browser.
    3-It is a global object with lots of properties & methods.
    4-It is generated by browser.

DOM stand for document Object Model
When a web page is loaded, the browser creates a Document Object Model (DOM) of the page

            window
               |
            document
               |
              HTML 
                |
             /      \
            /        \
         head          body 
          |             |
    /   /   \  \       /  \ 
   /   /     \  \     div  script
meta  meta title link  |
                       |
                   /  / \  \
                img  h1  p  div

HTML code that is attached with JS
HTML code ko hum JS mai access kerty ha..abh kaisy access kerty hai:
basically, html elements/tags hoty hai wo js mai convert hojaty hai objects mai or in special objects ko hum javascript mai document kehty hai

difference between console.log and console.dir 

console.log use to print something
console.dir use to treat/ print dom elements

console.log ---> print
console.dir ---> document --> properties/methods --> print

Window --> document(model) --> html

DOM is a tree like structure.
created by browser

the dynamic changes / manipulations in the websites are manage through DOM without any changes in HTML & CSS file. 
like light mode to dark mode

DOM Manipulation:
    1- Selecting with id
        document.getElementById(“myId”)
    2- Selecting with class
        document.getElementsByClassName(“myClass”)
    3- Selecting with tag
        document.getElementsByTagName(“p”)
    4- Query Selector
    document.querySelector(“#myId / .myClass / tag”)
    //returns first element
            
    document.querySelectorAll(“#myId / .myClass / tag”)
    //returns a NodeList
    
Properties 
we can check and set(change or update) elements.
    tagName : returns tag for element nodes

    innerText : returns the text content of the element and all its children

    innerHTML : returns the plain text or HTML contents in the element

    textContent : returns textu`sal content even for hidden elements

Attributes
    getAttribute( attr ) //to get the attribute value
    setAttribute( attr, value ) //to set the attribute value

Style
    node.style

Insert Elements 
{first, we have to create element 
let el = document.createElement(“div“)}
    node.append( el ) //adds at the end of node (inside)
    node.prepend( el ) //adds at the start of node (inside)
    node.before( el ) //adds before the node (outside)
    node.after( el ) //adds after the node (outside)

Delete Element
    node.remove( ) //removes the node

When create nodes in DOM tress, we have 3 types of nodes
    1- text node --> by defluat first node
    2- comment nodes
    3- elements nodes

Class List property
    The Element.classList is a read-only property that returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.

    Although the classList property itself is read-only, you can modify its associated DOMTokenList using the add(), remove(), replace(), and toggle() methods.const div = document.createElement("div");
    div.className = "foo";

    // our starting state: <div class="foo"></div>
    console.log(div.outerHTML);

    // use the classList API to remove and add classes
    div.classList.remove("foo");
    div.classList.add("anotherclass");

    // <div class="anotherclass"></div>
    console.log(div.outerHTML);

    // if visible is set remove it, otherwise add it
    div.classList.toggle("visible");

    // add/remove visible, depending on test conditional, i less than 10
    div.classList.toggle("visible", i < 10);

    // false
    console.log(div.classList.contains("foo"));

    // add or remove multiple classes
    div.classList.add("foo", "bar", "baz");
    div.classList.remove("foo", "bar", "baz");

    // add or remove multiple classes using spread syntax
    const cls = ["foo", "bar"];
    div.classList.add(...cls);
    div.classList.remove(...cls);

    // replace class "foo" with class "bar"
    div.classList.replace("foo", "bar");